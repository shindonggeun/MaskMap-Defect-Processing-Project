server:
  port: ${DATA_SERVER_PORT}  # 각 마이크로서비스의 고유 포트 (Data-Service의 경우 예시로 8082 사용)

spring:
  application:
    name: ${DATA_SPRING_APPLICATION_NAME}  # 서비스 이름을 설정하여 Eureka에 등록될 때 사용

  jpa:
    open-in-view: true
    defer-datasource-initialization: true
    generate-ddl: true
    hibernate:
      ddl-auto: none               # ddl 자동 작성 여부
    properties:
      hibernate:
        format_sql: false             # 하이버네이트가 실행한 SQL을 출력할 때 보기 좋게 정렬 비활성화
        use_sql_comments: false       # 하이버네이트가 실행한 SQL에 주석 달기 비활성화
        show_sql: false               # 하이버네이트가 실행한 SQL을 출력 비활성화
        jdbc:
          batch_size: 100              #   insert/update 쿼리를 원하는 개수만큼 모아서 DB에 날릴 수 있는 옵션
        default_batch_fetch_size: 100

  datasource:
    driver-class-name: org.postgresql.Driver  # PostgreSQL 드라이버 클래스
    url: ${DB_URL}  # PostgreSQL URL
    username: ${DB_USERNAME}  # PostgreSQL 사용자 이름
    password: ${DB_PASSWORD}  # PostgreSQL 비밀번호

  # Kafka Setting
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS_1}, ${KAFKA_BOOTSTRAP_SERVERS_2}, ${KAFKA_BOOTSTRAP_SERVERS_3} # 도커에서 설정한 내부 서비스명으로 접근 (내부 네트워크 이용)
    consumer:
      enable-auto-commit: false
      group-id: ${KAFKA_CONSUMER_GROUP_ID}
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_SERVER_URL}  # Eureka 서버의 URL

jasypt:
  encryptor:
    key: ${JASYPT_ENCRYPTOR_KEY}